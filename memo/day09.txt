프로그램 
	- 소스코드로 제작되어 있는 프로그램은 실행되지 않은 상태를 의미한다. 
프로세스
	- 실행되고 있는 프로그램( 메모리에 올라가서 동작하는 상태이다.) 
스레드
	- 비동기식 방식으로 특정 연산을 수행할 때 업무를 효율적으로 처리하기 	위해 짧은 시간 안에 다양한 연산들을 마치 동시에 처리하는 것처럼 하는 	것들을 할 수 있게 하는 것 
	- 쿨타임, 유튜브를 보고 있을 때, 무한 스크롤 등등 
 단일 스레드 
	- 처리 경로를 한 개만 가지고 있기 때문에 직렬적이다. 
	- 동시에 많은 양을 처리하기 힘들기 때문에 상대적으로 비효율적이다. 
	- 하지만 하나의 작업에 문제가 발생하더라도 다른 작업에 영향을 끼치지 않는다. 
	- 따라서 안정성이 보장되고 설게 시 멀티쓰레드에 비해 쉽다.
	-js는 대표적인 단일 스레드이다.  
멀티쓰레드 
	- 하나의 프로세스를 동시에 처리하는 것처럼 보이지만 사실은 매우 짧은 단위로 분할해서 차례로 처리한다. 
	- 여러개의 처리 경로를 가질 수 있도록 하며, 동시 작업이 가능해진다. 
	- 설계하기 굉장히 어려우며, 하나의 쓰레드 문제 발생 시 모든 쓰레드에 문제가 발생하게 된다. 
	- 멀티 쓰레드로 설계했다면, 처리량 증가, 효율성 증가, 처리 비용 감소의 장점이 있기 때문에 단점을 감수하고 설계한다. 
	- 자바가 대표적인 멀티스레드이다. 
	
동기, 비동기(synchronized) 
	- 동기와 비동기는 다르다( 두개의 흐름이 별개로 있다.) 
	- 비동기 안에서도 동기의 흐름이 잇다. 
	- 비동기는 비동기만의 흐름을 가지고 있다.  
	- 동기를 비동기로, 비동기를 동기로 바꿔야 합류가 된다. 

-> 동기 비동기를 나누는 이유: 사용자의 편의를 높이기 위해서 데이터만 나중에 불러오는 방식으로 하기 때문 
동기와 비동기, 두개의 길이 있으면 
동기는 시장 가게들만 있는 길, 이 안에 있는 사람들은 데이터라고 쳤을 때 
일단 가게들이 있어야 사람들이 장사를 할 수 있으니 
가게들이 쭈루룩 늘어선 것을 동기의 흐름, 비동기의 길에 사람들이 다니는 것을 비동기의 흐름이라고 한다. 
그리고 비동기의 사람들이 동기의 흐름으로 오기 위해서는 별도의 과정이 필요하다. 
비동기의 사람들이 상인이 되어야 시장에서 장사를 할 수 있고, 상인이 시장을 벗어나 평범한 길로 다니면 일반인이 되듯이 이것을 
동기를 비동기로, 비동기를 동기로 바꿔야 합류가 된다는 문장의 의미이다. 

axios, fetch(ES6) 
	- 기존의 web에서는 비동기 요청을 보내기 위해서 XML HTTP REQUEST(XHT) 객체를 생성해야 헀다. 
	그러나 이러한 xhr 요청에 상태나 변경에 따라 개발자의 의도에 맞게 사용하기가 어려워 이를 보완하기 위해 최적화 되고 추상화 
	되어 있는 API들이 생겨나기 시작했다. 
	- 대표적으로 axios와 fetch 이다. 
	- 단점으로 데이터 요청 및 응답데이터 수신 시 json 데이터를 받아올 수 없어서 파싱(json을 문자열로 바꾸는 것) 작업이 필요하다. 
	- response.json() : string -> json
	- JSON.stringfy() : json -> string 
-> 가공하기 어려웠다. 





